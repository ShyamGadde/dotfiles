# shellcheck shell=bash

if command -v pfetch &> /dev/null; then
    pfetch
fi

# History
HISTFILE=~/.cache/zsh_history
HISTSIZE=100000
SAVEHIST=$HISTSIZE

# ZSH options
setopt append_history         # This is default but set for share_history
setopt share_history          # Share history between all sessions
setopt extended_history       # Save each command's beginning timestamp and duration
setopt hist_ignore_all_dups   # Ignore duplicates in history
setopt hist_save_no_dups      # Do not save duplicates in history
setopt hist_find_no_dups      # Do not show duplicates when searching history
setopt hist_expire_dups_first # Remove duplicates first when trimming history
setopt hist_ignore_space      # Ignore commands that start with a space
setopt no_flow_control        # Disable Ctrl-S and Ctrl-Q output freezing
setopt prompt_subst           # Enable command substitution in prompt
setopt long_list_jobs         # Display PID of jobs when suspending them
setopt no_nomatch             # Do not fail on failed globbing and avoid the 'zsh: no matches found...'
setopt notify                 # Report the status of background jobs immediately
setopt hash_list_all          # Do not ignore the path when hashing commands
setopt complete_in_word       # Allow completion within a word
setopt interactive_comments   # Allow comments even in interactive shells
setopt extended_glob          # Enable extended globbing
setopt no_beep                # Disable beep on error
setopt no_glob_dots           # Do not include . and .. in globbing
setopt no_case_glob           # Case insensitive globbing
setopt rc_expand_param        # Array expansion with parameters
setopt numeric_glob_sort      # Sort filenames numerically when it makes sense
setopt correct                # Auto correct commands

# Skip the not really helping Ubuntu global compinit
export skip_global_compinit=1

# Remove duplicates in path variables
typeset -U path cdpath fpath manpath

# Modifying WORDCHARS to change word boundaries
# Removing '/', '.', ':', '_', and '-' from WORDCHARS so they're not considered part of a word
WORDCHARS=${WORDCHARS//[\/.:_-]/}

###############
### Vi mode ###
###############
bindkey -v
export KEYTIMEOUT=1 # The delay of pressing Esc key in vi mode is 0.4s by default, this makes it shorter (0.01s)

# Change cursor shape for different vi modes.
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
        echo -ne '\e[1 q' # Block cursor
    elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] || [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
        echo -ne '\e[5 q' # Beam cursor
    fi
}
zle -N zle-keymap-select

# Use beam shape cursor on startup.
echo -ne '\e[5 q'

# Use beam shape cursor for each new prompt.
function precmd() {
    echo -ne '\e[5 q'
}

###################
### Load Prompt ###
###################
# NOTE: Load starship after enabling the vi mode.
eval "$(starship init zsh)"

###############################
### Setup Completion Styles ###
###############################
zstyle :compinstall filename "$ZDOTDIR/.zshrc"

# NOTE: Should be called before compinit
zmodload zsh/complist

_comp_options+=(globdots) # Include hidden files.

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive completion
zstyle ':completion:*' rehash true                        # Automatically find new executables in path
# zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"   # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zcache

####################
### Load plugins ###
####################
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d "$ZINIT_HOME" ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d "$ZINIT_HOME"/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# FZF
export FZF_DEFAULT_COMMAND="fd --type f"
export FZF_DEFAULT_OPTS=" \
--border \
--reverse \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--color=border:#8caaee"
export FZF_CTRL_T_OPTS="
--walker-skip .git,node_modules,target
--height 50%
--preview 'bat -n --color=always {}'
--bind 'Alt-p:change-preview-window(down|hidden|)'"
export FZF_ALT_C_OPTS="
--walker-skip .git,node_modules,target
--height 50%
--preview 'eza --color=always --group-directories-first --icons -T {}'"

# Pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
export VIRTUAL_ENV_DISABLE_PROMPT=1

# NVM
export NVM_COMPLETION=true
export NVM_AUTO_USE=true # Automatically use the version of node specified in .nvmrc
export NVM_LAZY_LOAD=true
export NVM_LAZY_LOAD_EXTRA_COMMANDS=('code' 'nvim' 'vim')

############################################################################################################################################
#                                       ZINIT Notes
#                                    -----------------
#
# - `ZINIT[COMPINIT_OPTS]=-C`: The `-C` option for `compinit` tells Zsh not to scan the `$fpath` directories for completion functions.
# - `blockf`: This will block the traditional method of adding completions.
#             Zinit uses its own method (based on symlinks instead of adding a number of directories to `$fpath`).
# - `wait`: Defers the loading of a plugin until after `.zshrc` processing is complete and the first prompt is displayed.
#   - A value of `0` means it will be loaded 0 seconds after `.zshrc` is processed, which is same as just `wait`.
#   - The exclamation mark in `wait='!...'` causes Zinit to reset the prompt after loading plugin – it is needed for themes.
#   - Turbo with the empty `wait` ice will postpone the loading 1 ms after that.
# - `lucid`: Causes the under-prompt message saying 'Loaded <plugin-name>' that normally appears
#            for every Turbo-loaded plugin to not show.
# - `atload`: Execute code after loading plugin.
#   - The exclamation mark in `atload='!...'` is to track the functions allowing the plugin to be unloaded.
# - `atinit`: Execute code before loading plugin.
# - `atpull`: Execute code after updating plugin.
# - `nocd`: Don't `cd` into the plugin's directory when executing the `atload` ice – it could make the path that's displayed
#           by the theme to point to that directory.
# - `id-as`: Nickname a plugin or snippet.
#   - There's a special value to this ice – `auto`. It causes the nickname to be automatically set to the last
#     component of the plugin name or snippet URL.
#   - An empty string will work the same as `auto`.
# - `zicompinit`: equals to `autoload compinit; compinit`
# - `zicdreplay`: execute `compdef ...` calls that plugins did – they were recorded, so that `compinit` can be called later
#                 (`compinit` provides the `compdef` function, so it must be ran before issuing the taken-over `compdef`'s
#                 with `zicdreplay`)
# - `if`: Load plugin or snippet only when given condition is fulfilled.
#
# Syntax-highlighting plugins (like `fast-syntax-highlighting`) theoretically expect to be loaded last, even after the
# completion initialization (i.e. `compinit` function). However, in practice, you just have to ensure that such plugin is loaded
# after plugins that are issuing `compdef`'s – which basically means completions that aren't using the underscore-starting
# function file. The completion initialization still has to be performed before syntax-highlighting plugin, hence the
# `atinit` ice, which will load `compinit` right before loading the plugin.
############################################################################################################################################

# NOTE: FZF should to be loaded before atuin so that atuin can override the CTRL-R keybinding of FZF
zinit --wait --lucid for \
    --nocd \
    --atinit="ZINIT[COMPINIT_OPTS]=-C; zicompinit; autoload -U bashcompinit && bashcompinit; zicdreplay" \
    --atload="fast-theme XDG:catppuccin-mocha -q" \
    @zdharma-continuum/fast-syntax-highlighting \
    \
    --blockf --atpull="zinit creinstall -q ." \
    @zsh-users/zsh-completions \
    \
    --nocd \
    --atload="!_zsh_autosuggest_start" \
    --atload="source <(fzf --zsh)" \
    --atload="eval $(atuin init zsh --disable-up-arrow)" \
    --atload="eval $(zoxide init --cmd cd zsh)" \
    @zsh-users/zsh-autosuggestions \
    \
    @hlissner/zsh-autopair

# shellcheck disable=SC2046
zinit --wait --lucid --is-snippet --id-as='auto' for \
    "$ZDOTDIR"/keybinds.zsh \
    $(fd --type f . "$ZDOTDIR"/aliases | tr '\n' ' \ ')

zinit --wait='!2' --lucid for \
    --nocd \
    --completions \
    --atload="eval $(pyenv init -)" \
    --atload="eval $(pyenv virtualenv-init -)" \
    @lukechilds/zsh-nvm

# Arch Linux command-not-found support, you must have package pkgfile installed
# https://wiki.archlinux.org/index.php/Pkgfile#.22Command_not_found.22_hook
# NOTE: The reason for using the `atload` ice hack for loading `ftc.zsh` is that it actually sources `ftc.bash` in its original directory.
# Zinit copies/symlinks the snippet to its own directory, so the original path is lost.
zinit --wait=5 --lucid --is-snippet --id-as='auto' for \
    --if="[[ -e /usr/share/doc/pkgfile/command-not-found.zsh ]]" \
    --atload="[[ -e /usr/share/doc/find-the-command/ftc.zsh ]] && source /usr/share/doc/find-the-command/ftc.zsh" \
    /usr/share/doc/pkgfile/command-not-found.zsh
